1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,
5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L), .Label = c("Bogum",
"Clethra", "Eugene", "Guarria", "Melo", "Santa", "Sapium"), class = "factor"),
PAR = c(0, 58.6, 101.4, 228.6, 462.4, 904.7, 1565.8, 1992.1,
2395.9, 0, 72.8, 125.9, 232.8, 411, 841.1, 1669.6, 2394.5,
2394.9, 0, 53.5, 122.1, 231.6, 451, 808.5, 1575, 2394.6,
2395.1, 0, 70.9, 104.8, 251.1, 474.6, 858.3, 1612.3, 2393.3,
2395.1, 0, 63.1, 124.6, 277.1, 417.7, 824.4, 1649.6, 2377.7,
2381.9, 0, 31, 46.5, 115.7, 228.1, 424.3, 822.5, 1644.2,
2380.7, 2381.2, 0, 50.1, 118.1, 203.3, 413.2, 804.5, 1587.3,
2385.3, 0, 28.8, 36.9, 101.2, 211.7, 423.1, 793, 0, 43.6,
106.7, 200.8, 468.6, 808.4, 1567, 2367.1, 2376.5, 0.1, 40.4,
104.1, 202.2, 447.3, 794.7, 1546, 2391.8, 2393.3, 0.1, 44.1,
107.5, 227.4, 429.6, 802.5, 1668.4, 2391, 0, 42.2, 125.3,
126.2, 127.3, 240.3, 433.4, 791, 1600, 2396.8, 2397, 2399.3,
0, 72.7, 118.1, 236.9, 425, 828.4, 1613.3, 1615.4, 2396.1,
2396.5, 2397.2, 2397.5, 0, 62, 116.2, 235.5, 401.7, 879,
879.8, 1552.2, 1553.9, 2394.3, 2394.4, 2394.7, 2396.6, 0,
84.8, 135, 209.8, 425.3, 859.1, 1597.6, 2377.3, 2379.5, 2385.1,
0.1, 62, 106.3, 226.2, 442.9, 822.5, 1462.3, 2389.8, 2392.1,
0.1, 0.1, 73.9, 126, 249.8, 428.5, 846.5, 1555.3, 2390.1,
2390.7, 2390.8, 0, 68.7, 121.5, 209.7, 426.2, 803, 1525.9,
2389.8, 0, 52.8, 96.9, 211.1, 441.3, 787.9, 1566.5, 2415.2,
2415.3, 2415.5, 2417.5, 2417.7, 2418.5, 0.1, 46.5, 108.4,
233.5, 461.7, 792.3, 1635.7, 2415.1, 2415.6, 2415.6, 2416.5,
2416.6, 2417.8, 0.1, 68.3, 110, 239.5, 531.7, 847.2, 1591.4,
2387.3, 2387.6, 2389.7, 0, 49.7, 114.6, 230.6, 397.7, 398.2,
817.7, 1596.4, 2376.2, 2376.4, 2380.9, 0, 62.9, 65.5, 117,
209, 431.2, 854.5, 1611.3, 2387.3, 2388.5, 2390.3, 0, 49.1,
108.9, 200.3, 408.8, 842.2, 1630.2, 2386.5, 2386.8, 2388.2,
0, 64.8, 122.9, 226, 422.9, 801.6, 1635.7, 2383.6, 2383.6,
2384.3, 2386.1, 0, 36.7, 143.2, 213.7, 444.9, 814.9, 816.2,
1496.5, 2384.7, 2386.5, 2388.6, 0.1, 45.6, 105.2, 206.7,
494.8, 901.2, 1610.9, 2388, 2388.1, 2388.3, 2388.6, 0, 0.1,
45.9, 48.5, 100.2, 209.4, 432.4, 778, 1600.3, 2408.8, 2408.8,
0, 71.8, 121.6, 216.4, 404.3, 815.2, 1622, 2414.9, 2415.1,
2416.1, 2416.1, 0, 36.2, 97.5, 186.7, 417.9, 840.4, 1597.5,
2390.7, 2390.9, 2391.2, 2391.2, 2391.5, 2392.1, 2392.5, 0,
53.8, 138.2, 227, 403.6, 800.8, 1642.3, 2396.9, 2397.1, 0,
57.9, 95.1, 246.6, 466.8, 796.2, 1574.2, 2395.5, 2397.3,
0, 54.9, 94.9, 201.7, 408.1, 822.6, 1596, 2384.1, 0, 55.6,
131, 202.5, 419.8, 798.5, 1614, 2387.4, 2387.8, 0, 39.1,
109.6, 197.1, 403.3, 835.4, 836.9, 1725.9, 1727.4, 1729.3,
1730.6, 54.5, 58.6, 125.4, 226.9, 409, 806.8, 1578.8, 2377.2,
2380.1, 2388.3, 0, 68, 127.4, 206.9, 510.5, 814.9, 1561,
2404.1, 2404.8, 0, 58.4, 95.3, 229.6, 457.2, 781.5, 1634.4,
2399.8, 2401, 2403, 0.1, 56.5, 101.9, 221.8, 394.3, 815.1,
1655.4, 2411.8, 2411.9, 0, 50.2, 107.3, 220.5, 434.4, 819.8,
1630.6, 2412.4, 2412.6, 0, 48.4, 117.7, 195.3, 403.2, 801,
1632.7, 2388.9, 2389.3, 2390.7, 0, 50.4, 120.3, 234.7, 460.3,
829.1, 1581.7, 2398.5, 2402.3, 0, 60.8, 105.8, 215.8, 466.6,
826, 828.3, 1570.8, 2405.6, 2406.1, 2408.8, 0, 52.6, 106.9,
206.5, 414.3, 868.4, 1629.9, 1655.1, 2409.1, 2413, 0, 49.5,
100.6, 232.9, 389.4, 808.2, 1588.2, 2412.4, 2413.3, 2415.9,
0.1, 70.9, 110.5, 208.4, 409, 807.5, 1579.9, 2382.2, 2382.5,
2383.6, 2383.8, 0, 61.5, 106.5, 213.9, 473.8, 814.2, 1561.9,
2390.7, 2391.9, 2393.1, 0, 59.9, 64, 112, 216, 397.6, 807.4,
1625, 2392.3, 2395.1, 0, 74, 108.8, 109.7, 236.1, 433.6,
794.7, 1590.3, 2381.9, 2382.5, 0.1, 56.3, 114.5, 254.1, 487.7,
864.3, 1593.5, 2369.3, 2369.3, 2372.3, 2373.9, 0.2, 57.1,
110, 201.4, 402.7, 807.2, 1572.9, 2392.8, 2393.5, 0.1, 56.4,
122.5, 224.5, 420.2, 853.7, 1502.1, 2390.3, 2392.9, 0, 50.5,
53.7, 118.2, 230, 462.8, 794.3, 1513.4, 2391.4, 2392.3, 2393.4,
2393.4, 2394.1, 0.1, 49.7, 98.3, 208.3, 383.2, 850.7, 1653.5,
2395.3, 2396, 2397.1, 0, 48.4, 121.2, 228.8, 423.9, 817,
1708.5, 2389.9, 2389.9, 0, 66.4, 129.7, 209.4, 431.5, 794.1,
1673.7, 2383.7, 2384.2, 0, 57, 122.6, 215, 434.1, 838.5,
1657.5, 2386.4, 0.1, 22.6, 127.8, 220.4, 404.3, 810.9, 1592.3,
2386.7, 2388.7, 0, 49.8, 119.7, 200.5, 463.8, 828.7, 1560.7,
2384.5, 2385.7, 2391.2, 0, 73.1, 138.2, 226.6, 408.5, 815.3,
1627.3, 2390.2, 2395.4, 0, 61.2, 108.8, 233.8, 417.7, 824.5,
1502.7, 2395, 2396.2, 0, 56, 101.4, 226.3, 282.1, 412.9,
873.8, 1672.6, 2380.4, 2380.9, 2381.5, 0.1, 70.7, 138, 246,
444.4, 817.1, 1643.2, 2391.5, 2391.8, 2392), Pn = c(-0.95,
0.75, 0.94, 1.27, 1.5, 1.9, 2.14, 2.35, 2.38, 1.48, 3.51,
3.7, 3.99, 4.4, 4.32, 4.52, 4.73, 4.72, 1.97, 3.24, 4.23,
4.35, 4.41, 4.66, 4.57, 4.68, 4.88, 1.16, 3.64, 4.05, 4.75,
5.42, 5.57, 5.55, 5.89, 5.8, 1.48, 3.89, 4.7, 5.34, 5.47,
5.62, 5.71, 5.7, 6.08, 1.26, 0.59, 2.96, 4.34, 5, 4.82, 5.22,
5.2, 5.33, 5.51, 1.2, 2.95, 3.67, 3.9, 4.06, 4.59, 4.6, 4.62,
2.01, 1.92, 2.41, 2.19, 2.22, 2.41, 2.21, 1.6, 3.29, 3.97,
4.39, 4.89, 5.12, 4.93, 5.12, 5.1, 2.39, 3.84, 4.45, 4.63,
4.43, 4.93, 4.78, 4.73, 5.04, 3.09, 3.74, 4.03, 3.89, 4.52,
4.43, 4.24, 4.26, 1.5, 2.73, 2.83, 3.14, 2.89, 3.39, 2.89,
2.84, 3.34, 3.11, 3.16, 3.31, 0.1, 1.17, 1.72, 1.61, 1.64,
2.06, 2.17, 1.99, 2.31, 2.14, 2.27, 2.08, 0.17, 1.17, 1.32,
1.33, 1.4, 1.8, 1.48, 2, 1.81, 1.95, 2.09, 1.73, 1.85, 2.95,
4.33, 4.82, 4.98, 4.97, 5.03, 5.08, 5.22, 5.32, 4.88, 2.17,
3.08, 3.32, 3.42, 3.45, 3.67, 3.64, 3.71, 3.71, 2.85, 2.33,
3.15, 2.81, 3.22, 2.99, 3.16, 3.33, 3.56, 3.61, 3.63, 2.52,
3.55, 4.07, 4.1, 4.17, 4.41, 4.53, 4.56, 2.06, 2.57, 2.91,
2.61, 3.08, 3.29, 3.99, 6.49, 5.23, 6.08, 5.74, 4.41, 6.5,
1.59, 3.22, 3.59, 3.75, 3.84, 4.5, 4.93, 6.87, 6.75, 6.97,
6.53, 6.04, 6.82, 1.28, 3.56, 4.39, 5.27, 5.51, 6.38, 7.05,
7.46, 7.16, 7.24, 0.87, 2.45, 3.86, 4.32, 4.57, 4.43, 4.68,
4.71, 4.86, 4.36, 4.68, 1.06, 2.79, 4.05, 4.86, 5.48, 5.9,
6.38, 6.79, 7.46, 7.12, 7.03, 2.76, 3.92, 3.96, 4.07, 4.2,
4.5, 4.91, 5.52, 5.49, 5.33, 2.84, 4.78, 4.83, 4.76, 4.74,
4.84, 5.19, 5.59, 5.74, 5.7, 5.65, 3.02, 3.61, 4.14, 4.23,
4.45, 4.37, 4.5, 4.6, 4.78, 4.79, 4.85, 2.71, 4.26, 5.42,
6.24, 6.58, 6.63, 6.55, 7.29, 7.43, 7.24, 7, 3.36, 2.19,
2.86, 2.87, 2.37, 3.16, 2.68, 3, 3.4, 3.6, 4.35, 1.28, 2.62,
2.92, 3.3, 3.35, 3.58, 3.73, 4.02, 4, 3.7, 3.75, 1.61, 2.26,
2.5, 2.52, 2.71, 2.61, 2.75, 3.19, 2.92, 3.99, 4.36, 3.67,
4.14, 4.37, -0.28, 1.91, 2.78, 2.84, 2.96, 3.04, 3.24, 3.44,
3.58, 1.78, 4.12, 4.58, 4.33, 4.8, 4.7, 5.02, 5.09, 5.22,
2.79, 4.71, 4.89, 4.93, 4.87, 4.92, 4.83, 4.81, 1.66, 3,
4.04, 4.35, 4.56, 4.75, 4.75, 4.66, 4.89, 1.56, 2.77, 3.86,
3.58, 3.7, 3.76, 3.58, 4.55, 4.63, 4.05, 3.73, 1.76, 2.71,
2.98, 3.01, 3.06, 3.22, 2.99, 3.15, 3.32, 3.34, 1.58, 3.76,
4.97, 5.21, 5.29, 5.5, 5.59, 5.71, 5.74, 1.89, 2.67, 3.01,
3.14, 3.39, 3.57, 3.45, 3.91, 4.11, 3.94, 1.15, 2.88, 3.63,
4.32, 4.09, 4.43, 4.58, 4.61, 4.63, 1.23, 2.26, 3.15, 3.33,
3.3, 3.61, 3.46, 3.65, 3.67, 0.19, 2.23, 3.43, 4.1, 4.85,
5.21, 5.8, 6.27, 6.34, 6.08, 1.94, 3.72, 4.88, 5.51, 6.71,
6.51, 6.96, 7.01, 7.4, 0.48, 2.29, 2.5, 2.87, 3.18, 3.51,
3.13, 3.86, 4.13, 4.34, 4.03, 1.63, 3.64, 5.15, 5.95, 6.43,
6.57, 6.61, 6.51, 6.65, 6.56, 1.93, 3.95, 4.63, 5.66, 6.03,
6.28, 6.67, 6.69, 6.95, 6.75, 0.93, 3.14, 3.46, 3.9, 4.19,
4.27, 4.77, 5.39, 5.36, 5.24, 5.02, 1.71, 3.31, 3.86, 4.02,
4.02, 4.29, 4.36, 4.73, 4.88, 4.59, 1.63, 2.65, 2.63, 2.48,
2.93, 3.45, 4.01, 4.67, 5.02, 5.08, 1.93, 3.54, 3.8, 3.81,
4.04, 4.17, 4.38, 4.55, 4.99, 4.99, 1.29, 2.73, 3.32, 3.66,
3.77, 3.79, 4.14, 4.37, 4.22, 4.1, 4.14, 1.06, 2.89, 3.65,
4.01, 4.11, 4.19, 4.66, 5.03, 5.12, 0.97, 2.45, 2.99, 3.32,
3.34, 3.35, 3.47, 3.12, 3.38, 2.29, 1.72, 4.33, 5.49, 6.44,
6.96, 7.91, 7.49, 8.45, 8.21, 8.17, 8.71, 8.35, 0.29, 2.99,
3.93, 4.52, 5.69, 6.23, 6.23, 6.81, 6.96, 6.68, 0.99, 3.67,
4.62, 5.52, 5.86, 6.23, 5.91, 6.64, 6.29, -0.08, 3.34, 4.89,
6.02, 6.37, 6.59, 6.99, 6.95, 7.2, 0.99, 2.28, 2.72, 2.67,
2.99, 3.18, 3.55, 3.58, 1.31, 2.18, 5.55, 7.37, 8.42, 9.14,
9.44, 9.26, 9.5, 1.23, 3.11, 5.01, 6.21, 7.14, 7.44, 7.79,
7.73, 8.1, 7.96, 1.35, 3.33, 5.67, 6.58, 7.05, 7.36, 7.73,
7.75, 7.99, 0.4, 2.25, 2.83, 3.31, 3.55, 3.66, 3.96, 3.54,
3.77, 1.46, 2.91, 3.51, 3.64, 4.5, 3.83, 3.96, 4.17, 4.66,
4.09, 4.44, 2.41, 4.77, 5.49, 6.05, 6.15, 6.28, 6.6, 6.76,
6.75, 6.78)), .Names = c("Species", "PAR", "Pn"), class = "data.frame", row.names = c(NA,
-628L))
photofit <- function(y, x = NULL, start = NULL, weights = NULL, offset = NULL, ...,
estfun = FALSE, object = FALSE)
{
## only use first real regressor (without intercept)
x <- x[, 2]
## obtain starting values if necessary
if(is.null(start)) {
aux_lm <- lm(y ~ x)
aux_seg_2 <- segmented::segmented(aux_lm, seg.Z = ~ x, psi = 1)
aux_seg_1 <- segmented::segmented(aux_lm, seg.Z = ~ x, psi = aux_seg_2$psi[1, 2])
start <- list(
a = -1 * (segmented::intercept(aux_seg_1)[[1]][1, 1]),
b =           segmented::slope(aux_seg_1)[[1]][1, 1],
c = -1 * (segmented::intercept(aux_seg_1)[[1]][2, 1]),
d = -1 *      segmented::slope(aux_seg_1)[[1]][2, 1]
)
} else {
start <- as.list(start)
}
## estimate NLS model
rval <- nls(y ~ (a * exp(-b * x) - c * exp(-d * x)), start = start)
## return processed information for mob()
list(
coefficients = coef(rval),
objfun = deviance(rval),
estfun = if(estfun) sandwich::estfun(rval) else NULL,
object = if(object) rval else NULL
)
}
photomob <- mob(Pn ~ PAR | Species, data = eco, fit = photofit,
control = mob_control(verbose = TRUE))
coef(photomob)
yes
yes
plot(photomob)
plot(photomob, terminal_panel = node_bivplot, tnex = 2)
117*.8
117*.8+10+5.9
library("foreign")
library("glmertree")
library("lme4")
library("strucchange")
library("partykit")
IPDMA <- read.spss("3. STPP+ADM vs (BSP+)ADM combined.sav", to.data.frame = TRUE)
setwd("C:/Users/fokkemam/Desktop/Advies Projecten/Ellen Driessen/IPDMA data")
IPDMA <- read.spss("3. STPP+ADM vs (BSP+)ADM combined.sav", to.data.frame = TRUE)
IPDMA <- read.spss("3. STPP+ADM vs (BSP+)ADM combined.sav", to.data.frame = TRUE)
attributes(IPDMA)$variable.labels
names(IPDMA)
dim(IPDMA)
## Responses:
hist(IPDMA$rawHAMDpost); table(is.na(IPDMA$rawHAMDpost)) # 100 missing
hist(IPDMA$zHAMDpost); table(is.na(IPDMA$zHAMDpost)) # 100 missing
hist(IPDMA$rawHAMDfu); table(is.na(IPDMA$rawHAMDfu)) # 177 missing
hist(IPDMA$zHAMDfu); table(is.na(IPDMA$zHAMDfu)) # 177 missing
library("foreign")
library("glmertree")
library("lme4")
library("strucchange")
library("partykit")
IPDMA <- read.spss("3. STPP+ADM vs (BSP+)ADM combined.sav", to.data.frame = TRUE)
attributes(IPDMA)$variable.labels
names(IPDMA)
dim(IPDMA)
## Responses:
hist(IPDMA$rawHAMDpost); table(is.na(IPDMA$rawHAMDpost)) # 100 missing
hist(IPDMA$zHAMDpost); table(is.na(IPDMA$zHAMDpost)) # 100 missing
hist(IPDMA$rawHAMDfu); table(is.na(IPDMA$rawHAMDfu)) # 177 missing
hist(IPDMA$zHAMDfu); table(is.na(IPDMA$zHAMDfu)) # 177 missing
with(IPDMA, table(Study, HAMD17)) ## Lopez study used 21 instead of 17 items
par(mfrow = c(1,3))
boxplot(rawHAMDpre ~ Study, data = IPDMA, main = "pre HAMD")
boxplot(rawHAMDpost ~ Study, data = IPDMA, main = "post HAMD")
boxplot(rawHAMDpost - rawHAMDpre ~ Study, data = IPDMA, main = "post-pre HAMD")
names(IPDMA)
boxplot(zHAMDpre ~ Study, data = IPDMA, main = "pre HAMD")
boxplot(zHAMDpre ~ Study, data = IPDMA, main = "pre HAMD")
with(IPDMA, table(Study, HAMD17)) ## Lopez study used 21 instead of 17 items
par(mfrow = c(1,3))
boxplot(zHAMDpre ~ Study, data = IPDMA, main = "pre HAMD")
boxplot(zHAMDpost ~ Study, data = IPDMA, main = "post HAMD")
boxplot(zHAMDpost - zHAMDpre ~ Study, data = IPDMA, main = "post-pre HAMD")
IPDMA <- IPDMA[complete.cases(IPDMA[,c("zHAMDpre", "zHAMDpost")]),]
dim(IPDMA)
## Cluster id:
table(IPDMA$Study, useNA = "ifany")
## Linear predictor(s):
table(IPDMA$Condition, useNA = "ifany")
## Partitioning vars:
with(IPDMA, tapply(Study, Study, length))
sapply(IPDMA[,5:24], function(var) {table(is.na(var), IPDMA$Study)[1,]})
names(IPDMA)
sapply(IPDMA[,4:24], function(var) {table(is.na(var), IPDMA$Study)[1,]})
with(IPDMA, table(Study, HAMD17)) ## Lopez study used 21 instead of 17 items
sapply(IPDMA[, 4:22], function(var) {table(is.na(var), IPDMA$Study)[1,]})
vars <- c("Condition", "BSP", "Gender", "Age", "MarStat", "Education",
"JobStat", "Religion", "Epdur", "PriorTx", "PriorEp", "HisHos",
"PDcomorbidity", "ADcomorbidity", "CGIS", "GAF", "Zanx", "zHAMDpre",
"zHAMDpost", "zHAMDfu")
tmp <- round(cor(sapply(IPDMA[vars], as.numeric), use = "pairwise.complete"), digits = 2)
vars <- c("Condition", "BSP", "Gender", "Age", "MarStat", "Education",
"JobStat", "Religion", "Epdur", "PriorTx", "PriorEp", "HisHos",
"PDcomorbidity", "ADcomorbidity", "CGIS", "GAF", "Zanx")#, "zHAMDpre",
tmp <- round(cor(sapply(IPDMA[vars], as.numeric), use = "pairwise.complete"), digits = 2)
IPDMA[vars]
sapply(IPDMA[vars], as.numeric)
vars <- c("Condition", "BSP", "Gender", "Age", "MarStat", "Education",
"JobStat", "Religion", "Epdur", "PriorTx", "PriorEp", "HisHos",
"PDcomorbidity", "CGIS", "GAF", "Zanx")#, "zHAMDpre",
"zHAMDpost", "zHAMDfu")
tmp <- round(cor(sapply(IPDMA[vars], as.numeric), use = "pairwise.complete"), digits = 2)
vars <- c("Condition", "BSP", "Gender", "Age", "MarStat", "Education",
"JobStat", "Religion", "Epdur", "PriorTx", "PriorEp", "HisHos",
"PDcomorbidity", "ADcomorbidity", "CGIS", "GAF", "Zanx", "zHAMDpre",
"zHAMDpost", "zHAMDfu")
tmp <- round(cor(sapply(IPDMA[vars], as.numeric), use = "pairwise.complete"),
digits = 2)
tmp[tmp < .2 & tmp > -.2] <- NA
tmp
vignettes("rpart")
vignette("rpart")
library(rpart)
browseVignettes("rpart")
browseVignettes("rpart")
2270/9074
6804/9074
6804+2270
9074/14,296
9074/14296
1196/2270
1849/2270
544/2270
3167/6804
5263/6804
1100/6804
4363/14296
4363/9074
7142/9074
7871+972+606+402+149
1931/9074
1644/9074
5788+1812+964+408+1028
5254/9074
5252/9074
1123+7948
1333+7741
909+8165
1123+7948
1123/9071
citation
citation()
setwd("C:/Users/fokkemam/Desktop/Onderwijs Leiden/Bachelorthese project 2018-2019/B-these project Trees/Pruning CART (rpart) trees")
library("rpart")
dep_cart <- rpart(bdi ~ ., data = dep_data)
library("foreign")
dep_data <- read.spss("data Carrillo et al.sav", to.data.frame = TRUE)
library("rpart")
library("rpart")
dep_cart <- rpart(bdi ~ ., data = dep_data)
plot(dep_cart)
text(dep_cart)
plot(dep_cart)
text(dep_cart)
browseVignettes("rpart")
?control
?rpart
dep_cart$cptable
set.seed(1)
dep_cart2 <- rpart(bdi ~ ., data = dep_data,
control = rpart.control(cp = 0, xval = 10))
printcp(dep_cart2)
cp_table <- printcp(dep_cart2)
printcp
frame <- dep_cart$frame
leaves <- frame$var == "<leaf>"
used <- unique(frame$var[!leaves])
used
?print
?printcp
library("rpart")
dep_cart <- rpart(bdi ~ ., data = dep_data)
plot(dep_cart)
text(dep_cart)
plot(dep_cart)
text(dep_cart)
?rpart
?rpart_control
?rpart.control
set.seed(1)
dep_cart2 <- rpart(bdi ~ ., data = dep_data,
control = rpart.control(cp = 0, xval = 10))
cp_table <- printcp(dep_cart2)
cp_table <- data.frame(cp_table)
cp_table$CP
?prune.rpart
prune.rpart(dep_cart2, cp = cp_table$CP[which(cp_table$xerror) == min(cp_table$xerror)])
which(cp_table$xerror)
cp_table$xerror)
cp_table$xerror
min(cp_table$xerror)
prune.rpart(dep_cart2, cp = cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))])
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))]
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))]
dep_pruned <- prune.rpart(dep_cart2, cp = opt_cp_val)
plot(dep_pruned)
text(dep_pruned)
plot(dep_pruned)
text(dep_pruned)
browseVignettes("rpart")
cp_table
dep_data$sexo <- factor(dep_data$sexo)
gen_ctree <- ctree(sexo ~ . - bdi - edad, data = dep_data)
gen_cart <- rpart(sexo ~ . - bdi - edad, data = dep_data)
plot(gen_cart)
text(gen_cart)
set.seed(1)
gen_cart <- rpart(sexo ~ . - bdi - edad, data = dep_data,
control = rpart.control(cp = 0, xval = 10))
plot(gen_cart)
text(gen_cart)
cp_table <- printcp(gen_cart)
?printcp
?rpart.control
?rpart
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))]
cp_table
cp_table$CP
cp_table <- data.frame(cp_table)
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))]
opt_cp_val
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))][1]
opt_cp_val
gen_pruned <- prune.rpart(gen_cart, cp = opt_cp_val)
opt_cp_val <- cp_table$CP[which(cp_table$xerror == min(cp_table$xerror))][1]
gen_pruned <- prune.rpart(gen_cart, cp = opt_cp_val)
plot(gen_pruned)
text(gen_pruned)
library("rpart")
dep_cart <- rpart(bdi ~ ., data = dep_data)
dep_cart
dep_cart <- tree
dep_cart -> tree
frame <- tree$frame
frame
leaves <- frame$var == "<leaf>"
used <- unique(frame$var[!leaves])
used
get_vars_rpart <- function(tree) {
frame <- tree$frame
leaves <- frame$var == "<leaf>"
varnames <- unique(frame$var[!leaves])
return(varnames)
}
get_vars_rpart(dep_cart)
frame <- tree$frame
leaves <- frame$var == "<leaf>"
varnames <- unique(frame$var[!leaves])
varnames
?unique
get_vars_rpart <- function(tree) {
frame <- tree$frame
leaves <- frame$var == "<leaf>"
return(unique(frame$var[!leaves]))
}
get_vars_rpart(dep_cart)
get_vars_rpart <- function(tree) {
frame <- tree$frame
leaves <- frame$var == "<leaf>"
return(as.character(unique(frame$var[!leaves])))
}
get_vars_rpart(dep_cart)
dep_cart$frame
tree$frame$var
as.character(tree$frame$var)
get_vars_rpart <- function(tree) {
vars <- as.character(tree$frame$var)
vars[vars != "<leaf>"]
}
get_vars_rpart(dep_cart)
library("partykit")
dep_cart <- ctree(bdi ~ ., data = dep_data)
dep_catree <- ctree(bdi ~ ., data = dep_data)
dep_ctree <- ctree(bdi ~ ., data = dep_data)
dep_ctree
dep_ctree$node
dep_ctree$node$split
dep_ctree -> tree
length(tree)
tree[[1]]$node
tree[[1]]$node$split
tree[[1]]$node$split$varid
tree[[2]]$node$split$varid
for(1 in 1:length(tree))
for(i in 1:length(tree)) {}
for(i in 1:length(tree)) {
print(tree[[i]]$node$split$varid)}
dep_ctree
names(tree$data)
get_vars_ctree <- function(tree) {
vars <- c()
for (i in 1:length(tree)) {
vars <- c(vars, names(tree$data)[tree[[i]]$node$split])
}
return(vars)
}
get_vars_ctree(dep_ctree)
tree[[i]]$node$split
tree[[1]]$node$split
get_vars_ctree <- function(tree) {
vars <- c()
for (i in 1:length(tree)) {
vars <- c(vars, names(tree$data)[tree[[i]]$node$split$varid])
}
return(vars)
}
get_vars_ctree(dep_ctree)
get_vars_ctree <- function(tree) {
vars <- c()
for (i in 1:length(tree)) {
vars <- c(vars, names(tree$data)[tree[[i]]$node$split$varid])
}
return(unique(vars))
}
get_vars_ctree(dep_ctree)
dep_lmtree <- lmtree(bdi ~ ., data = dep_data)
dep_lmtree
dep_lmtree <- lmtree(bdi ~ 1 | ., data = dep_data)
dep_lmtree
get_vars_ctree(dep_lmtree)
get_vars_partykit <- function(tree) {
vars <- c()
for (i in 1:length(tree)) {
vars <- c(vars, names(tree$data)[tree[[i]]$node$split$varid])
}
return(unique(vars))
}
dep_data$sexo <- factor(dep_data$sexo)
